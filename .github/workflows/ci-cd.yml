name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python manage.py test
        env:
          DJANGO_SETTINGS_MODULE: dealsync.settings.dev

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME || secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD || secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: dealsync:latest

      - name: Test Docker image
        run: |
          docker run --rm dealsync:latest python manage.py check

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production server..."
          # Add your deployment commands here
          # For example, you could use SSH to connect to your server and pull the new Docker image
          # ssh user@server 'docker pull ${{ secrets.DOCKER_USERNAME || secrets.DOCKERHUB_USERNAME }}/dealsync:latest && docker-compose up -d'